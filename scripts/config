#!/bin/bash
# In simple cases, you don't need a config script.

# With a simple config_panel.toml, you can write in the app settings, in the
# upstream config file or replace complete files (logo ...) and restart services.

# The config scripts allows you to go further, to handle specific cases
# (validation of several interdependent fields, specific getter/setter for a value,
# display dynamic informations or choices, pre-loading of config type .cube... ).

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

install_dir=$(ynh_app_setting_get --key=install_dir)

#=================================================
# ADDITIONAL HELPERS
#=================================================

# Custom setter for all MARL customPrefs 
_marl_set_custom_pref() {
    local setting_id="$1"
    local new_value="${!setting_id}"
    local type="${types[$setting_id]}"

    # Format value output for the app config file
    if [[ -z "$new_value" ]] || ( [ $type = "select" ] && ( [ $new_value = "auto" ] || [ $new_value = "empty" ] ) ); then
        # add quotes to empty var OR make select choices `auto`/`empty` corresponds to an empty var in the app config file
        new_val_for_config_file="\"\""

    elif [ $setting_id = "lang" ] || [ $setting_id = "theme" ] || [ $setting_id = "defaultPanel" ]; then
        # string with quotes
        new_val_for_config_file="\"$new_value\""
    else
        # boolean or number (no quotes)
        new_val_for_config_file=$new_value
    fi
    
    ynh_replace --match="^\s\s\"$setting_id.*" --replace="  \"$setting_id\": $new_val_for_config_file," --file="$install_dir/js/config.js"
    ynh_app_setting_set --key="$setting_id" --value="$new_value"
}

#=================================================
# SPECIFIC GETTERS FOR TOML SHORT KEY
#=================================================

get__archives_paths() {
    local archives_urls="$(grep -E '^const servers\s=\s\[' $install_dir/js/config.js | cut -d= -f2 | sed 's/ //g')" #output example:`["server1","server2","server3"]` 
    archives_urls="${archives_urls//[\[\]\";]/}" #output example: `server1,server2,server3`

    echo -e "${archives_urls//,/\\n\\n}" #double newline required for proper display in config panel's text input box 
}

#=================================================
# SPECIFIC SETTERS FOR TOML SHORT KEYS
#=================================================

set__archives_paths() {
    # Convert multiline string into one comma-separated line
    comma_separated_archives_paths="${archives_paths//[[:space:]]/,}"
    comma_separated_archives_paths_quoted="\"${archives_paths//[[:space:]]/\",\"}\""
    
    ynh_replace --match="^const servers.*" --replace="const servers = [$comma_separated_archives_paths_quoted];" --file="$install_dir/js/config.js"
    ynh_app_setting_set --key="archives_paths" --value="$comma_separated_archives_paths"
}

#=================================================
# OVERWRITE EXISTING HELPERS
#=================================================

ynh_app_config_apply_one() {
    local setting_id="$1"
    
    marl_custom_prefs=(lang theme sortAsc pageSize combinePanels defaultPanel showActorJson simplifyPostsDisplay showPostsJson) 
    if [[ " ${marl_custom_prefs[*]} " =~ [[:space:]]${setting_id}[[:space:]] ]]; then #inspired from https://stackoverflow.com/questions/3685970/check-if-a-bash-array-contains-a-value/15394738#15394738
        # Use custom setter 
        _marl_set_custom_pref "$setting_id"
    else
        # Get back to default behavior
        _ynh_app_config_apply_one "$setting_id"
    fi
}

#=================================================
ynh_app_config_run "$1"
